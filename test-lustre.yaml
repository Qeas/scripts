apiVersion: v1
kind: ServiceAccount
metadata:
  name: chroot-test-service-account
  namespace: csi
---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: chroot-test-cluster-role
rules:
  - apiGroups: ['']
    resources: ['secrets']
    verbs: ['get', 'list', "watch"]
  - apiGroups: ['']
    resources: ['persistentvolumes']
    verbs: ['get', 'list', 'watch', 'create', 'update', 'delete'] # "update" for attacher
  - apiGroups: ['']
    resources: ['persistentvolumeclaims']
    verbs: ['get', 'list', 'watch', 'update']
  - apiGroups: ['storage.k8s.io']
    resources: ['storageclasses']
    verbs: ['get', 'list', 'watch']
  - apiGroups: ['']
    resources: ['events']
    verbs: ['list', 'watch', 'create', 'update', 'patch']
  - apiGroups: ['snapshot.storage.k8s.io']
    resources: ['volumesnapshots']
    verbs: ['get', 'list']
  - apiGroups: ['snapshot.storage.k8s.io']
    resources: ['volumesnapshotcontents']
    verbs: ['get', 'list']
  # attacher specific
  - apiGroups: ['']
    resources: ['nodes']
    verbs: ['get', 'list', 'watch']
  - apiGroups: ['csi.storage.k8s.io']
    resources: ['csinodeinfos']
    verbs: ['get', 'list', 'watch']
  - apiGroups: ['storage.k8s.io']
    resources: ['volumeattachments']
    verbs: ['get', 'list', 'watch', 'update']
  # snapshotter specific
  - apiGroups: ['snapshot.storage.k8s.io']
    resources: ['volumesnapshotclasses']
    verbs: ['get', 'list', 'watch']
  - apiGroups: ['snapshot.storage.k8s.io']
    resources: ['volumesnapshotcontents']
    verbs: ['create', 'get', 'list', 'watch', 'update', 'delete']
  - apiGroups: ['snapshot.storage.k8s.io']
    resources: ['volumesnapshots']
    verbs: ['get', 'list', 'watch', 'update']
  - apiGroups: ['apiextensions.k8s.io']
    resources: ['customresourcedefinitions']
    verbs: ['create', 'list', 'watch', 'delete']
  - apiGroups: [""]
    resources: ["persistentvolumeclaims/status"]
    verbs: ["update", "patch"]
  # CSINode specific
  - apiGroups: ["storage.k8s.io"]
    resources: ["csinodes"]
    verbs: ["watch", "list", "get"]
---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: chroot-test-cluster-role-binding
subjects:
  - kind: ServiceAccount
    name: chroot-test-service-account
    namespace: csi
roleRef:
  kind: ClusterRole
  name: chroot-test-cluster-role
  apiGroup: rbac.authorization.k8s.io
---

# Openshift does not allow to run containers as root by default, which is a hard requirement for the drivers to work
# Add the following SecurityContextConstraints to allow root access
kind: SecurityContextConstraints
apiVersion: security.openshift.io/v1
metadata:
  name: "exascaler-csi"
allowPrivilegedContainer: true
allowHostNetwork: true
allowHostDirVolumePlugin: true
allowHostPorts: true
allowedCapabilities: ["SYS_ADMIN"]
allowHostPorts: true
allowHostPID: true
allowHostIPC: true
readOnlyRootFilesystem: false
runAsUser:
  type: RunAsAny
seLinuxContext:
  type: RunAsAny
fsGroup:
  type: RunAsAny
supplementalGroups:
  type: RunAsAny
volumes:
  - configMap
  - projected
  - emptyDir
  - hostPath
  - secret
users:
  # A user needs to be added for each service account.
  - "system:serviceaccount:csi:chroot-test-service-account"
  # - "system:serviceaccount:csi:exascaler-csi-node-service-account"
---

kind: Deployment
apiVersion: apps/v1
metadata:
  name: chroot-test
spec:
  replicas: 1
  selector:
    matchLabels:
      app: chroot-test # has to match .spec.template.metadata.labels
  template:
    metadata:
      labels:
        app: chroot-test
    spec:
      serviceAccount: chroot-test-service-account
      containers:
        - name: driver
          securityContext:
            privileged: true
            capabilities:
              add: ['SYS_ADMIN']
            allowPrivilegeEscalation: true
          image: docker.io/alexeykhodos/almalinux-8.7-lustre:2.15.2
          command: ["sleep"]
          args: ["1000"]
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: host
              mountPath: /host
              mountPropagation: Bidirectional
      volumes:
        - name: host
          hostPath:
            path: /
            type: Directory
---



# ---------
# Nginx pod
# ---------

apiVersion: v1
kind: Pod
metadata:
  name: lustre-test
spec:
  containers:
    - image: docker.io/alexeykhodos/almalinux-8.7-lustre:2.15.2
      imagePullPolicy: IfNotPresent
      command: ["sleep"]
      args: ["1000"]
      name: lustre
      securityContext:
        privileged: true
        capabilities:
          add: ['SYS_ADMIN']
        allowPrivilegeEscalation: true
      volumeMounts:
        - name: host
          mountPath: /host
          mountPropagation: Bidirectional
  volumes:
    - name: host
      hostPath:
        path: /
        type: Directory